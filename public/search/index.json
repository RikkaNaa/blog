[{"content":"为什么？ 起因是2024/8/18起床水TG群的时候突发奇想想把博客换成静态（\n虽然原先在用的Mix-Space很好用，Shiro前端也很好看，但是占用毕竟还是太大了，速度也有点慢\n于是便光速翻了一遍，最终敲定下来使用Hugo+Stack主题这一套方案\n过程 由于我是完完全全的前端废物，所以几乎全都是照葫芦画瓢\n不过我并没有选择比较普遍的Github Pages/Vercel部署，反正手上有台年付的阿里云HK轻量，不用也是浪费了\n用服务器部署静态博客的我一定是有什么大病 网页服务器用的是Caddy，配置简单不用管TLS还支持H/3\n文章直接从Mix-Space后台下载md稍微改改front-matter就行了，不过笔记(类似于推文/朋友圈？)还不知道扔哪里比较好\n最后 又水了一篇文章啦\n之后应该还会继续完善的，如果有空学了前端说不定还能爆改一番x\n部署参考 带着Stack主题入坑Hugo\n使用hugo stack主题快速搭建博客\n使用Hugo部署博客以及Stack主题的美化\nStack官方文档\nHugo官方文档\n","date":"2024-08-18T20:23:08+08:00","permalink":"https://rikka.im/post/from-mix-space-to-hugo/","title":"从Mix-Space迁移至Hugo"},{"content":"关于 买了台零刻SER5 MAX，对Vega 7羸弱的性能实在是难以忍受\n但是又想要便携性不损失，于是便选择了用NVMe转SFF-8612 (OCuLink)，要带走电脑的话直接把线拔了就行了\n使用的是开源宇宙的EG01，有个架子还是美观点的\n显卡选择Tesla M40的最大原因其实是没钱（x\n性能还OK，显存也大，重点是还便宜\n折腾过程 到货，插电，开机，轻松卡自检\n其实是预料之中的问题，把整个BIOS翻烂了都找不到Above 4G Decoding的选项，用UAFB依然如此\n经过查找，看到一篇教程，使用UEFITool查找Above 4G Decoding的VarStoreInfo后使用modGRUBShell强开\n（附：SER5 MAX的VarStoreInfo为0xF7）\n开启完成之后就能成功开机了\n接下来就是正常流程的装驱动~~，改注册表开启WDDM (参考)~~\n事实上并不需要，只要管理员运行\n1 nvidia-smi -dm 0 即可切换WDDM模式\nLinux下就更简单了，装好闭源驱动就能直接就能用于图形渲染\n不过要注意禁用GSP-RM，否则会出现占用低帧数上不去的问题 (出处)\n1 2 3 4 sudo su -c \u0026#39;echo options nvidia NVreg_EnableGpuFirmware=0 \u0026gt; /etc/modprobe.d/nvidia-gsp.conf\u0026#39; sudo update-initramfs -u #Debian/Ubuntu sudo mkinitcpio -P #ArchLinux reboot 性能\u0026amp;跑分 地平线4: 在Linux下预设高，1080P全程60帧但会有不频发的小卡顿，2K下可以跑55-60帧，小卡顿较为频发但不太影响游戏 在Windows下预设高，2K除了在地平线全程60帧 To do\n使用体验 显卡坞可以随机启停，这点很棒，不用一直按来按去开关了\n风扇是EVGA的980Ti的，改装了温控，不打游戏时很安静，打游戏也不会很吵\n温度控制的很好，不管玩什么游戏都不会超过50℃\n","date":"2024-05-31T14:36:07.467Z","permalink":"https://rikka.im/post/tesla-m40/","title":"Tesla M40 上手体验"},{"content":"参数以及外观 外观 图片来源\n根据官方提供的参数，主机的尺寸为 126x113x42mm\n整机很轻便，要是口袋大点的甚至可以塞口袋里\n参数 I/O接口方面\n前面板：\nCLR CMOS键一个 USB 3.2 Gen 1三个 Type-A两个 Type-C一个(支持DP视频输出，PD供电，但不支持反向供电) 极为先进的3.5mm TRRS一个 电源键兼状态指示灯一个 后置：\n1Gbps RJ45一个 USB 3.2 Gen 1 Type-A一个 USB 2.0 Type-A一个 DP一个 HDMI一个 19V DC-IN一个 我自己装的SFF-8612 (OCuLink)一个 主机内部：\nSATA 3.0一个 PCIe 3.0 x4 M.2 2280一个 PCIe 2.0 x1 M.2 2230一个 SO-DIMM DDR4两个 详细配置如表\n硬件 型号 CPU AMD Ryzen 7 5800H GPU AMD Radeon Vega 8 \u0026amp; NVIDIA Tesla M40 RAM Gloway DDR4-2666 16G 硬盘 Zhitai SC001 Active 1T 声卡 Realtek ALC897 有线网卡 Realtek RTL8168 无线网卡 Intel AX200 使用体验 做工很棒，拆开机器里面可以说是赏心悦目，仿佛一个工艺品，比我之前的天钡MN5X好很多\n到手之后插上硬盘和内存秒开，没有奇奇怪怪的内存兼容性问题\n很小巧，买个便携屏可以带着到处跑\n性能的话，将PBO三项拉满并将Scalar调整至10x后满载可以短暂的跑上全核4.1Ghz，但坚持不了几秒钟就会降频到3.6-3.7Ghz，CPU-Z的分数变化大概就是从5950+降到5280+\n试了下用核显来打CHUNITHM LMN，窗口化遇到特效复杂的地方会掉帧挺严重，其他游戏待测试\nBIOS自由度很高，能开放的基本都开放了，无需使用UniversalAMDFormBrowser设置\n风扇比较安静，没有负载的情况下放在身边睡觉都OK，不过满载噪音还是很大的（毕竟AMD祖传积热问题）\n外接M40之后性能有了质的飞跃，改了温控之后声音表现也很棒了，完全可以开着过夜\nTo do\u0026hellip;\n总结 整体的使用体验还是不错的，日常办公写文章写代码玩Gal完全够用 (废话)\n现正使用OCuLink外接M40，游戏性能完全过关了\n","date":"2024-05-04T16:55:23.609Z","image":"https://pic3.zhimg.com/v2-251c8c7b96949f2d045db157e46a5106_b.webp","permalink":"https://rikka.im/post/beelink-ser5-max/","title":"零刻SER5 MAX使用体验"},{"content":"前言 21年的时候一时起兴想买台Windows二合一平板，于是买了台Surface Go2，但是性能过于羸弱，而且发热十分严重，于是吃灰至今\n目前的状态是键盘丢失，USB3.1无法识别，只能用2.0，属于是半报废的状态\n而官方维修又属实贵的离谱 (2000+)，所以就研究一下能不能让她焕发新机\n探索过程 音游 作为一个音游人，最先考虑到的当然是打音游啦\n但是很可惜，这台板子的触控真的是我碰过的最差的，没有之一\n我曾尝试过包括但不限于：\n使用Moonlight+Sunshine串流打maimai，但由于延迟太大和多押断触，根本玩不下去 使用Brokenithm打CHUNITHM，依然还是多押断触 装FydeOS打移动端音游，无一例外都是延迟很大并且明显卡顿 因此打音游直接Pass\nGalGame 既然音游不行，那配置要求更小的GalGame又如何呢？ 答案依旧是不行\n原因就在于Surface Go2的屏幕并不是标准16:9的1080P，而是3:2的1920x1280\n那么这就会导致运行部分Gal会出现一些奇奇怪怪的图形问题，比如说窗口鬼畜，或者根本打不开游戏\n唯一的解决办法就是把分辨率调到1920x1080，但那样的话就得忍受上下大黑边\nAndroid 你或许注意到了，我上文提到了一个词 FydeOS\n这是一个基于Chromium OS二次开发的系统，兼容Android环境并且高度集成，而且有对Surface系列专门适配过的版本\n但Surface Go2的表现依然是不尽人意的\nFydeOS 更新日志：\n鉴于 Microsoft Surface 硬件的特殊性，目前只能使用仍在开发中的实验性触控驱动方案。这会导致触摸识别时有不灵敏的现象。\n鉴于 Microsoft Surface 硬件的特殊性，以下功能在 Surface 家族的硬件中暂时未能支持：\n摄像头\n重新启动时用 PIN 码登录\n不仅如此，由于m3-8100y和UHD615本身的性能就十分差，再加上驱动问题和转译，运行Android应用的效率低得要命，还有很严重的发热问题\n因此作为Android平板使用也不在我们考虑范围之内\nu1s1应该没人会花大几千买台Win板然后跑Android\nNothing To Do 已经出了，本文终结\n总结 总是就是干啥啥不行，发热卡顿第一名\n没什么好总结的了\n","date":"2024-04-12T18:23:55.201Z","permalink":"https://rikka.im/post/surface-go2-relife-project/","title":"半报废的Surface Go2拯救计划"},{"content":"前言 如果你想要将 Artemis 放在服务器上使用的话，那应该很需要反向代理\n毕竟你也不想为了它而牺牲服务器的 80/443 端口吧\n需要的东西 一颗清醒的大脑 一个已经解析到服务器的域名 一台安装了 Nginx/Caddy 的服务器 Artemis 配置 为了能让反代后的 Artemis 也能正常工作，需要对 core.yaml 作出以下修改\n1 2 3 4 5 6 7 8 9 10 11 12 13 server: listen_address: \u0026#34;127.0.0.1\u0026#34; hostname: \u0026#34;aime.example.com\u0026#34; #修改为你要使用域名 is_develop: False is_using_proxy: True proxy_port: 80 proxy_port_ssl: 443 allnet: standalone: False billing: standalone: False aimedb: listen_address: \u0026#34;0.0.0.0\u0026#34; 完整的配置文件如下\ncore.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 server: listen_address: \u0026#34;127.0.0.1\u0026#34; hostname: \u0026#34;aime.example.com\u0026#34; #修改为你要使用域名 port: 8088 ssl_key: \u0026#34;cert/title.key\u0026#34; ssl_cert: \u0026#34;cert/title.crt\u0026#34; allow_user_registration: True allow_unregistered_serials: True name: \u0026#34;ARTEMiS\u0026#34; is_develop: False is_using_proxy: True proxy_port: 80 proxy_port_ssl: 443 log_dir: \u0026#34;logs\u0026#34; check_arcade_ip: False strict_ip_checking: False title: loglevel: \u0026#34;info\u0026#34; reboot_start_time: \u0026#34;\u0026#34; reboot_end_time : \u0026#34;\u0026#34; database: host: \u0026#34;127.0.0.1\u0026#34; username: \u0026#34;aime\u0026#34; password: \u0026#34;password\u0026#34; name: \u0026#34;aime\u0026#34; port: 3306 protocol: \u0026#34;mysql\u0026#34; sha2_password: False loglevel: \u0026#34;info\u0026#34; enable_memcached: True memcached_host: \u0026#34;localhost\u0026#34; frontend: enable: False port: 8089 loglevel: \u0026#34;info\u0026#34; secret: \u0026#34;\u0026#34; allnet: standalone: False port: 80 loglevel: \u0026#34;info\u0026#34; allow_online_updates: False update_cfg_folder: \u0026#34;\u0026#34; billing: standalone: False loglevel: \u0026#34;info\u0026#34; port: 8443 ssl_key: \u0026#34;cert/server.key\u0026#34; ssl_cert: \u0026#34;cert/server.pem\u0026#34; signing_key: \u0026#34;cert/billing.key\u0026#34; aimedb: enable: True listen_address: \u0026#34;0.0.0.0\u0026#34; loglevel: \u0026#34;info\u0026#34; port: 22345 key: \u0026#34;Copyright(C)SEGA\u0026#34; id_secret: \u0026#34;\u0026#34; id_lifetime_seconds: 86400 mucha: loglevel: \u0026#34;info\u0026#34; Nginx 配置 如果你需要 SSL Title Server 或者游戏没有打补丁的话\n那么你需要一个有效的 SSL 证书\n可以使用 acme/certbot 自动申请续签\nALL.Net ::: warning 请使用 naominet.jp 作为 server_name\n否则网络自检将会 NG :::\n1 2 3 4 5 6 7 8 9 10 server { listen 80; server_name naominet.jp; location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass_request_headers on; proxy_pass http://localhost:8088/; } } Title 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 server { listen 80; server_name aime.example.com; #你在 core.yaml 里设置的 hostname location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass_request_headers on; proxy_pass http://localhost:8088/; } } #如果无需SSL Title可删除下面这段 server { listen 443 ssl; server_name aime.example.com; ssl_certificate /path/to/your/certificate; #证书路径 ssl_certificate_key /path/to/your/privatekey; #私钥路径 ssl_session_timeout 1d; ssl_session_cache shared:MozSSL:10m; ssl_session_tickets off; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers \u0026#34;ALL:@SECLEVEL=0\u0026#34;; ssl_prefer_server_ciphers off; location / { proxy_pass http://localhost:8088/; } } Billing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 server { listen 8443 ssl;\tserver_name ib.naominet.jp; ssl_certificate /path/to/your/certificate; #证书路径 ssl_certificate_key /path/to/your/privatekey; #私钥路径 ssl_session_timeout 1d; ssl_session_cache shared:MozSSL:10m; ssl_session_tickets off; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers \u0026#34;ALL:@SECLEVEL=0\u0026#34;; ssl_prefer_server_ciphers off; location / { proxy_pass http://localhost:8088/; } } Caddy 配置 参考Nginx配置写的\n还没测试过，按理来说应该能跑起来\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # ALL.Net naominet.jp:80 { reverse_proxy http://localhost:8088 } # Title aime.example.com:80 { reverse_proxy http://localhost:8088 } # SSL Title aime.example.com:443 { reverse_proxy http://localhost:8088 tls /path/to/your/certificate /path/to/your/privatekey } # Billing ib.naominet.jp:8443 { reverse_proxy http://localhost:8088 tls /path/to/your/certificate /path/to/your/privatekey } 游戏配置 在 segatools.ini 的 default= 后写上你前面使用的域名 (如 aime.example.com)\n并确保 allnet_accounting 处于关闭状态\n","date":"2024-01-20T13:31:12.271Z","permalink":"https://rikka.im/post/artemis-prod/","title":"Artemis反向代理配置参考"},{"content":"介绍 Artemis 没什么好介绍的了吧，给 SEGA 系 HDD 用的本地服，算是 Aqua 的继承者？\nA network service emulator for games running SEGA\u0026rsquo;S ALL.NET service, and similar.\nArtemis 更新真的很快，我的更新速度可能跟不上\n如果内容失效的话，评论区或者邮箱发我，看到会处理的）\nWindows 准备 所需要的东西有\nWindows 10 或以上系统 Python MariaDB 良好的网络连接 清醒的大脑 安装 Python Python 的安装就不多赘述了，一搜一大把，建议使用 3.11\n记得勾上 PATH\n安装MariaDB 11 安装过程略\n在开始里找到 MySQL Client 打开登录\n逐行输入以下命令，\u0026lt;Enter Password Here\u0026gt;改为你想设置的密码\n1 2 3 4 5 CREATE USER \u0026#39;aime\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;\u0026lt;Enter Password Here\u0026gt;\u0026#39;; CREATE DATABASE aime; GRANT Alter,Create,Delete,Drop,Index,Insert,References,Select,Update ON aime.* TO \u0026#39;aime\u0026#39;@\u0026#39;localhost\u0026#39;; FLUSH PRIVILEGES; exit; 下载 Artemis 有两种方式可选 直接下载Artemis-develop后解压\n或者使用 git (推荐，方便更新)\n1 git clone https://gitea.tendokyu.moe/Hay1tsme/artemis.git -b develop 安装 Python 模块 在 Artemis 文件夹内打开 powershell，执行\n1 pip install -r requirements.txt 配置 Artemis 将 example_config 文件夹改名为 config 编辑配置文件 config/core.yaml:\n1 2 3 4 5 6 server: listen_address: 0.0.0.0 database: password: \u0026#34;你之前设置的密码\u0026#34; aimedb: key: \u0026#34;Copyright(C)SEGA\u0026#34; 如果你不需要游玩头文字 D 的话，可以在 idz.yaml 中将其关闭\n配置数据库 1 python dbutils.py create Artemis，启动！ 到这里，Artemis 的基础配置已经完成了\n使用\n1 python index.py 启动试试吧，如果一切正常，你将会看到会看到类似\n的输出\nLinux 实际上没什么好讲的\n装个 MySQL，装个 Memcached，然后参考 Windows 的流程就好了\n游戏针对性设置 [!NOTE] 除 Chinithm 外均未测试，不保证可用性\n如果你有资源的话欢迎发我测试\nChunithm 本文假定你游玩的是 Chunithm Sun Plus (2.16) 以上版本\n如果你仍在游玩 Sun 及以下版本，请使用AquaDX\n导入资源 在 Artemis 目录下执行\n1 python read.py --game SDBT --version 14 --binfolder \u0026lt;data的路径\u0026gt; --optfolder \u0026lt;opt的路径\u0026gt; 坐和放宽，等待导入完成\n修改配置文件 编辑 config/chuni.yaml:\n(P.S: 下方ROM和Data版本号视情况修改，当然不改也没关系)\n1 2 3 4 5 6 team: name: ARTEMiS # 默认队伍名 version: 14: rom: 2.16.00 data: 2.15.11 完成 在 segatools.ini 里的 default= 填上你的局域网 IP 地址\n[!NOTE] 不要使用 localhost 和 127.0.0.1\n否则 ALL.Net 会 NG\n开始享受你的次新次热吧\nFAQ 此处收录常见问题，如果你遇到了可以发我）\nALL.Net Authentication BAD 请检查游戏目录下 config_common.json 中 allnet_auth 是否为 2.0，如果是，改为 1.0 依然是 config_common.json ，检查 allnet_accounting 是否打开，如果是，关掉它 Title BAD 如果你是服务器运行的话 config/core.yaml 中的 hostname 改为服务器 IP/域名，本地运行则为 localhost 全 GOOD 但是灰网 检查 amfs 下的两个 ICF 是否正确 请不要使用中文目录 ","date":"2024-01-07T01:35:33.008Z","permalink":"https://rikka.im/post/artemis-manual/","title":"Artemis不完全食用指南"}]